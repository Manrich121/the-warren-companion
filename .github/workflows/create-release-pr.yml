name: Create Release PR

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: "Version bump type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  calculate-version:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    outputs:
      current_version: ${{ steps.current_version.outputs.current }}
      new_version: ${{ steps.new_version.outputs.new }}
      branch_name: ${{ steps.branch_info.outputs.branch_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(jq -r '.version' manifest.json)
          echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Calculate new version
        id: new_version
        run: |
          CURRENT_VERSION="${{ steps.current_version.outputs.current }}"
          VERSION_TYPE="${{ github.event.inputs.version_type }}"
          CUSTOM_VERSION="${{ github.event.inputs.custom_version }}"

          if [ ! -z "$CUSTOM_VERSION" ]; then
            NEW_VERSION="$CUSTOM_VERSION"
            echo "Using custom version: $NEW_VERSION"
          else
            # Parse current version
            IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
            MAJOR=${VERSION_PARTS[0]}
            MINOR=${VERSION_PARTS[1]:-0}
            PATCH=${VERSION_PARTS[2]:-0}

            case $VERSION_TYPE in
              "major")
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                ;;
              "minor")
                MINOR=$((MINOR + 1))
                PATCH=0
                ;;
              "patch")
                PATCH=$((PATCH + 1))
                ;;
            esac

            if [ $PATCH -eq 0 ] && [ $MINOR -gt 0 ]; then
              NEW_VERSION="$MAJOR.$MINOR.0"
            elif [ $PATCH -eq 0 ] && [ $MINOR -eq 0 ]; then
              NEW_VERSION="$MAJOR.0.0"
            else
              NEW_VERSION="$MAJOR.$MINOR.$PATCH"
            fi
          fi

          echo "new=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Set branch info
        id: branch_info
        run: |
          BRANCH_NAME="release/v${{ steps.new_version.outputs.new }}"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "Branch name: $BRANCH_NAME"

  create-release-branch:
    runs-on: ubuntu-latest
    needs: calculate-version
    outputs:
      branch_name: ${{ needs.calculate-version.outputs.branch_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Create release branch
        run: |
          BRANCH_NAME="${{ needs.calculate-version.outputs.branch_name }}"
          git checkout -b "$BRANCH_NAME"

      - name: Update manifest.json
        run: |
          NEW_VERSION="${{ needs.calculate-version.outputs.new_version }}"
          jq --arg version "$NEW_VERSION" '.version = $version' manifest.json > manifest.json.tmp
          mv manifest.json.tmp manifest.json
          echo "Updated manifest.json to version $NEW_VERSION"

      - name: Update README.md
        run: |
          NEW_VERSION="${{ needs.calculate-version.outputs.new_version }}"
          CURRENT_VERSION="${{ needs.calculate-version.outputs.current_version }}"

          # Update version badges and download links
          sed -i "s/Release-v${CURRENT_VERSION}/Release-v${NEW_VERSION}/g" README.md
          sed -i "s/download%20v${CURRENT_VERSION}/download%20v${NEW_VERSION}/g" README.md
          sed -i "s/tags\/v${CURRENT_VERSION}/tags\/v${NEW_VERSION}/g" README.md

          echo "Updated README.md version references from v$CURRENT_VERSION to v$NEW_VERSION"

      - name: Commit changes
        run: |
          NEW_VERSION="${{ needs.calculate-version.outputs.new_version }}"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add manifest.json README.md
          git commit -m "Bump version to v$NEW_VERSION"

      - name: Push release branch
        run: |
          BRANCH_NAME="${{ needs.calculate-version.outputs.branch_name }}"
          git push origin "$BRANCH_NAME"

  create-pr-and-release:
    runs-on: ubuntu-latest
    needs: [calculate-version, create-release-branch]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Create Pull Request
        id: create_pr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEW_VERSION: ${{ needs.calculate-version.outputs.new_version }}
          BRANCH_NAME: ${{ needs.calculate-version.outputs.branch_name }}
        run: |
          # Create PR body with changelog
          PR_BODY="## Release v$NEW_VERSION"

          # Create the pull request and capture URL
          PR_URL=$(gh pr create \
            --title "Release v$NEW_VERSION" \
            --body "$PR_BODY" \
            --base master \
            --head "$BRANCH_NAME" \
            --label "release")

          echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT
          echo "Created PR: $PR_URL"

      - name: Create Draft GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEW_VERSION: ${{ needs.calculate-version.outputs.new_version }}
        run: |
          # Create release notes
          RELEASE_NOTES="**ðŸ“‹ Release PR:** ${{ steps.create_pr.outputs.pr_url }}

          ## What's Changed in v$NEW_VERSION
            -

          ## Installation instructions

          1. Unzip contents to a convenient place
          2. Open Chrome and go to [chrome://extensions/](chrome://extensions/)
          3. Enable **Developer mode** (toggle in the top right)
          4. Click **Load unpacked**
          5. Select the folder containing this extension
          6. The extension will be loaded and active"

          # Create draft release
          gh release create "v$NEW_VERSION" \
            --title "v$NEW_VERSION" \
            --draft \
            --notes "$RELEASE_NOTES"

      - name: Output summary
        run: |
          NEW_VERSION="${{ needs.calculate-version.outputs.new_version }}"
          BRANCH_NAME="${{ needs.calculate-version.outputs.branch_name }}"
          echo "## Release PR Created! ðŸŽ‰" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **New Version**: v$NEW_VERSION" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: $BRANCH_NAME" >> $GITHUB_STEP_SUMMARY
          echo "- **Pull Request**: Created with release changes" >> $GITHUB_STEP_SUMMARY
          echo "- **Draft Release**: Created on GitHub" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Review and merge the pull request" >> $GITHUB_STEP_SUMMARY
          echo "2. The draft release will be ready to publish" >> $GITHUB_STEP_SUMMARY
          echo "3. Update release notes as needed before publishing" >> $GITHUB_STEP_SUMMARY
